// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HeroPool {
    //主属性 A概率
    uint256[] private  attr11Pool = [98,95,95,94,93,98,92,94,93,94,99,93,96,96,95,95,99,96,97,96,92,96,100,90,94,91,90,93,93,90,93,90,97,91,98,94,95,91,97,92,95,90,91,91,96,94,92,92];
    //主属性 B概率
    uint256[] private  attr12Pool = [93,85,87,88,98,90,88,90,89,94,86,85,91,86,94,92,95,86,86,89,93,92,92,85,98,95,94,93,85,94,92,93,91,86,94,87,88,89,89,90,97,91,93,90,96,86,100,88,87,97,91,88,87,91,94,95,87,88,91,92,89,99,96,87,85,92,93,89,99,90,90,96,97,85];
    //主属性 C概率
    uint256[] private  attr13Pool = [74,66,72,72,87,61,71,82,88,60,65,63,73,75,91,71,68,82,65,92,78,80,75,76,69,71,85,88,68,63,72,85,89,89,89,90,77,64,63,78,90,81,91,74,68,81,62,85,69,61,83,73,76,86,71,73,90,92,70,79,82,86,70,83,70,86,74,63,77,69,60,77,77,61,87,69,76,74,67,78,68,66,67,85,63,64,66,90,75,68,80,86,89,88,82,88,61,87,78,86,79,69,85,86,77,81,91,80,66,89,81,80,91,74,60,88,79,91,84,73,67,75,89,60,90,79,72,84,62,67,83,87,90,88,64,66,90,61,80,75,72,67,65,85,60,78,83,70,84,84,76,87,79,91,62,73,64,65,65,70,87,76,88,64,71,81,82,83,86,85,62,62,84,89,87,91];

    //次属性
    uint256[] private  attr2Pool = [76,51,49,45,60,33,39,82,18,58,63,61,19,65,75,31,56,82,68,48,70,32,82,64,22,47,37,22,40,12,66,51,69,36,50,78,37,66,85,79,77,33,85,76,46,35,48,89,78,61,87,36,81,20,57,71,31,18,25,81,54,59,41,47,45,74,58,62,72,35,33,72,67,37,63,55,51,24,39,43,53,42,46,54,83,81,85,86,90,13,57,29,53,67,55,28,15,49,47,27,41,62,48,33,29,49,67,60,53,75,80,26,66,79,71,44,40,36,70,80,52,11,57,16,40,21,84,86,39,61,58,44,65,70,89,82,79,84,81,73,52,31,17,70,43,68,20,16,66,46,59,88,60,88,15,48,31,87,84,26,44,41,10,38,27,64,30,73,47,50,58,36,77,14,64,14,65,67,53,56,85,90,83,83,65,38,71,12,23,41,17,45,39,50,28,51,32,52,56,59,35,78,76,57,34,62,49,74,32,38,43,71,54,59,34,50,73,68,42,45,55,72,83,63,64,35,74,56,42,25,75,69,61,34,60,77,11,78,13,74,69,24,32,75,63,54,38,34,77,80,76,55,79,40,72,84,43,52,19,73,62,23,10,37,21,30,44,42,69,46,80,68];
    uint256[] private  attr3Pool = [61,74,20,14,23,52,55,40,71,30,12,31,19,17,43,49,51,24,60,45,42,42,57,21,51,44,16,37,76,47,81,41,25,50,55,33,56,70,59,83,38,72,38,28,72,12,74,41,84,17,68,64,63,10,10,35,19,20,45,34,47,24,31,38,32,46,59,30,43,45,52,66,69,49,68,25,47,50,16,31,54,48,21,46,19,33,36,39,78,13,39,13,37,14,77,27,53,18,14,36,46,15,65,42,22,22,27,78,26,62,29,85,57,26,75,35,60,39,32,69,10,15,79,70,77,48,33,17,58,18,11,29,30,12,79,18,23,43,82,13,22,44,35,26,71,54,40,63,16,20,64,50,49,41,73,23,15,80,29,36,80,53,56,75,48,44,21,67,28,11,37,73,27,28,34,66,67,65,58,11,25,62,76,40,32,61,24,34];

    uint256[] private  idsPool = [202,302,203,301,302,102,102,202,204,201,302,201,202,201,202,303,201,104,201,201,201,203,303,204,203,204,204,103,303,201,101,203,301,204,203,302,202,202,303,303,304,101,201,102,103,201,201,202,302,101,304,102,301,302,302,302,204,103,303,102,202,201,201,201,202,201,303,202,304,204,203,202,302,202,102,202,201,104,203,203,201,303,203,202,201,101,201,301,204,303,201,202,204,304,204,301,303,201,203,204,202,301,202,303,203,101,103,304,202,201,104,301,203,203,101,202,204,303,103,104,202,204,203,201,203,302,201,301,202,102,301,203,203,304,203,104,203,102,104,202,104,102,202,103,304,101,103,204,202,203,301,103,304,101,203,202,304,103,104,103,202,104,302,104,303,202,204,303,302,102,101,204,204,204,202,101,204,303,104,202,301,203,201,204,204,204,102,201,301,301,204,103,203,101,201,102,304,203,304,204,101,304,301,101,303,301,203,202,203,304,201,302,304,102,203,103,304,102,203,301,201,204,201,204,204,202,202,201,101,103,202,301,202,204,204,201,101,204,203,104,202,202,304,202,204,201,303,103,203,104,103,302,101,104,103,102,102,103,203,203,302,201,102,201,201,103,204,301,203,101,204,204,101,302,204,303,204,304,303,304,104,202,104,204,204,203,203,204,301,304,203,303,302,104,203,202,301,201,102,102,101,102,104,201,201,103,302,302,304,203,104,101,203,202,203,201,103,104,302,204];


    /* 随机hero */
    function rand(uint256 total_times, uint256 my_times) public view returns (uint256 _hero_id, uint256 li, uint256 min, uint256 zhi) {
        _hero_id = idsPool[total_times % idsPool.length];
        uint256 _type = _hero_id - (_hero_id % 100);

        //主属性
        uint attr1;
        if (my_times == 1) {
            attr1 = attr11Pool[total_times % attr11Pool.length];
        } else if (my_times % 5 == 0) {
            attr1 = attr12Pool[total_times % attr12Pool.length];
        } else {
            attr1 = attr13Pool[total_times % attr13Pool.length];
        }

        uint attr2 = attr2Pool[total_times % attr2Pool.length];
        uint attr3 = attr3Pool[total_times % attr3Pool.length];

        if (_type == 1) {
            return (_hero_id, attr1, attr2, attr3);
        } else if (_type == 2) {
            return (_hero_id, attr2, attr1, attr3);
        } else {
            return (_hero_id, attr3, attr1, attr2);
        }
    }
}